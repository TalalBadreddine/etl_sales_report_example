# Generated by Django 5.1.2 on 2024-11-02 16:07

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('report', '0004_alter_report_customer_id'),
    ]



    def get_operations(self):
        reverse_sql = [
            "DROP FUNCTION IF EXISTS get_top_n_products_sold CASCADE;",
            "DROP FUNCTION IF EXISTS get_top_n_products_by_profit CASCADE;",
            "DROP FUNCTION IF EXISTS get_top_n_products_by_unit_price CASCADE;",
            "DROP FUNCTION IF EXISTS get_count_of_products_by_name CASCADE;",
            "DROP FUNCTION IF EXISTS get_products_in_n_quartile_by_total_price CASCADE;",
            "DROP FUNCTION IF EXISTS get_nth_quartile_by_quantity_sold CASCADE;"
        ]
        return [
            migrations.RunSQL(sql, reverse_sql[i])
            for i, sql in enumerate(self.sql_functions)
        ]

    # Define operations as a property
    @property
    def operations(self):
        return self.get_operations()

    sql_functions = [
 """
        CREATE OR REPLACE FUNCTION get_top_n_products_sold(
            top_n INT,
            start_date DATE DEFAULT NULL,
            end_date DATE DEFAULT NULL
        )
        RETURNS TABLE (product_name VARCHAR, total_quantity_sold INT) AS $$
        BEGIN
        RETURN QUERY
            SELECT
                r.product_name,
                SUM(r.quantity_sold)::INT as total_quantity_sold
            FROM report r
            WHERE
                (start_date IS NULL OR r.date_sold >= start_date) AND
                (end_date IS NULL OR r.date_sold <= end_date)
            GROUP BY r.product_name
            ORDER BY total_quantity_sold DESC
            LIMIT top_n;
        END;
        $$ LANGUAGE plpgsql;
        """,
        """
        CREATE OR REPLACE FUNCTION get_top_n_products_by_profit(
            top_n INT,
            start_date DATE DEFAULT NULL,
            end_date DATE DEFAULT NULL
        )
        RETURNS TABLE (product_name VARCHAR, total_profit NUMERIC) AS $$
        BEGIN
        RETURN QUERY
            SELECT r.product_name, ROUND(
                SUM(r.total_price)::numeric, 2
            ) as total_profit
            FROM report r
            WHERE
                (start_date IS NULL OR r.date_sold >= start_date) AND
                (end_date IS NULL OR r.date_sold <= end_date)
            GROUP BY
                r.product_name
            ORDER BY total_profit DESC
            LIMIT top_n;
        END;
        $$ LANGUAGE plpgsql;
        """,
        """
        CREATE OR REPLACE FUNCTION get_top_n_products_by_unit_price(
            top_n INT
        )
        RETURNS TABLE (product_name VARCHAR, unit_price NUMERIC) AS $$
        BEGIN
        RETURN QUERY
            SELECT
                r.product_name,
                ROUND(MAX(r.unit_price)::NUMERIC, 2) as unit_price
            FROM report r
            GROUP BY
                r.product_name
            ORDER BY unit_price DESC
            LIMIT top_n;
        END;
        $$ LANGUAGE plpgsql;
        """,
        """
        CREATE OR REPLACE FUNCTION get_count_of_products_by_name(
            limit_count INT
        )
        RETURNS TABLE (product_name VARCHAR, product_count INT) AS $$
        BEGIN
        RETURN QUERY
            SELECT
                r.product_name,
                COUNT(r.product_name)::INT as product_count
            FROM report r
            GROUP BY
                r.product_name
            ORDER BY product_count DESC
            LIMIT limit_count;
        END;
        $$ LANGUAGE plpgsql;
        """,
        """
        CREATE OR REPLACE FUNCTION get_products_in_n_quartile_by_total_price(
            quartile_number INT,
            limit_count INT,
            start_date DATE DEFAULT NULL,
            end_date DATE DEFAULT NULL
        )
        RETURNS TABLE (product_name VARCHAR, total_price NUMERIC) AS $$
        BEGIN
        RETURN QUERY
            SELECT t.product_name, t.total_price
            FROM (
                SELECT
                    r.product_name,
                    ROUND(SUM(r.total_price)::NUMERIC, 2) as total_price,
                    NTILE(4) OVER (ORDER BY SUM(r.total_price)) as quartile
                FROM report r
                WHERE
                    (start_date IS NULL OR r.date_sold >= start_date) AND
                    (end_date IS NULL OR r.date_sold <= end_date)
                GROUP BY
                    r.product_name
            ) t
            WHERE t.quartile = quartile_number
            ORDER BY total_price DESC
            LIMIT limit_count;
        END;
        $$ LANGUAGE plpgsql;
        """,
        """
        CREATE OR REPLACE FUNCTION get_nth_quartile_by_quantity_sold(
            quartile_number INT,
            limit_count INT,
            start_date DATE DEFAULT NULL,
            end_date DATE DEFAULT NULL
        )
        RETURNS TABLE (product_name VARCHAR, total_quantity_sold BIGINT) AS $$
        BEGIN
        RETURN QUERY
            SELECT
                t.product_name,
                t.total_quantity_sold
            FROM (
                SELECT
                    r.product_name,
                    SUM(r.quantity_sold) as total_quantity_sold,
                    NTILE(4) OVER (ORDER BY SUM(r.quantity_sold)) as quartile
                FROM report r
                WHERE
                    (start_date IS NULL OR r.date_sold >= start_date) AND
                    (end_date IS NULL OR r.date_sold <= end_date)
                GROUP BY
                    r.product_name
            ) t
            WHERE t.quartile = quartile_number
            LIMIT limit_count;
        END;
        $$ LANGUAGE plpgsql;
        """
    ]


    # Remove the property decorator and get_operations method
    operations = [
        migrations.RunSQL(
            sql,
            f"DROP FUNCTION IF EXISTS {func_name} CASCADE;"
        )
        for sql, func_name in zip(
            sql_functions,
            [
                "get_top_n_products_sold",
                "get_top_n_products_by_profit",
                "get_top_n_products_by_unit_price",
                "get_count_of_products_by_name",
                "get_products_in_n_quartile_by_total_price",
                "get_nth_quartile_by_quantity_sold"
            ]
        )
    ]