name: Deploy Docker Compose Application

on:
  workflow_run:
    workflows: ["Build and Publish Docker Image"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Install SSH Client
      run: |
        sudo apt-get update -y
        sudo apt-get install -y openssh-client

    - name: Set up SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key
        chmod 600 ~/.ssh/ec2_key
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/ec2_key
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Copy Docker Compose files
      run: |
        scp -i ~/.ssh/ec2_key docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/deployment/
        scp -i ~/.ssh/ec2_key init.sql ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/deployment/

    - name: Deploy to EC2
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          # Install Docker if needed
          if ! command -v docker &> /dev/null; then
              sudo yum install -y docker
              sudo service docker start
              sudo usermod -a -G docker ${{ secrets.EC2_USER }}
          fi

          # Install docker-compose if needed
          if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
          fi

          cd ~/deployment

          # Export environment variables
          export IMAGE_TAG=${{ github.sha }}
          export DB_NAME=${{ secrets.DB_NAME }}
          export DB_USER=${{ secrets.DB_USER }}
          export DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          # Stop and remove existing containers
          sudo docker ps -q | xargs -r sudo docker stop
          sudo docker ps -aq | xargs -r sudo docker rm

          # Pull and start new containers
          sudo docker-compose pull
          sudo docker-compose up -d