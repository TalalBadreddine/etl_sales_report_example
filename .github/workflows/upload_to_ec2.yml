name: Deploy Docker Compose Application

on:
  workflow_run:
    workflows: ["Build and Publish Docker Image"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Install SSH Client
      run: |
        sudo apt-get update -y
        sudo apt-get install -y openssh-client

    - name: Set up SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key
        chmod 600 ~/.ssh/ec2_key
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/ec2_key
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Copy Docker Compose files
      run: |
        ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p ~/deployment"
        scp -i ~/.ssh/ec2_key docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/deployment/
        scp -i ~/.ssh/ec2_key init.sql ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/deployment/

    - name: Deploy to EC2
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd ~/deployment

          if ! command -v docker &> /dev/null; then
              sudo yum install -y docker
              sudo service docker start
              sudo usermod -a -G docker ${{ secrets.EC2_USER }}
          fi

          if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
          fi

          # Mount the EBS volume
          if ! mountpoint -q /mnt/ebs; then
              sudo mkdir -p /mnt/ebs
              sudo mount /dev/sdb /mnt/ebs
          fi

          # Ensure the directory for PostgreSQL data exists
          sudo mkdir -p /mnt/ebs/postgres_data
          sudo chown -R 1000:1000 /mnt/ebs/postgres_data

          echo IMAGE_TAG=${{ github.sha }} > .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo DB_USER=${{ secrets.DB_USER }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }} >> .env
          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env

          sudo docker ps -q | xargs -r sudo docker stop
          sudo docker ps -aq | xargs -r sudo docker rm

          sudo docker-compose pull
          sudo docker-compose up -d
        EOF